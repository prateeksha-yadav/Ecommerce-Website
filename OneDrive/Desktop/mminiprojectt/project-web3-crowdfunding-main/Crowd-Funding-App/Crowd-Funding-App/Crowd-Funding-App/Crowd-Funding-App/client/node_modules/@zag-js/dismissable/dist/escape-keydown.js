"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/escape-keydown.ts
var escape_keydown_exports = {};
__export(escape_keydown_exports, {
  trackEscapeKeydown: () => trackEscapeKeydown
});
module.exports = __toCommonJS(escape_keydown_exports);

// ../core/src/functions.ts
var runIfFn = (v, ...a) => {
  const res = typeof v === "function" ? v(...a) : v;
  return res != null ? res : void 0;
};

// ../core/src/guard.ts
var hasProp = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

// ../dom/src/listener.ts
var isRef = (v) => hasProp(v, "current");
function addDomEvent(target, eventName, handler, options) {
  const node = isRef(target) ? target.current : runIfFn(target);
  node == null ? void 0 : node.addEventListener(eventName, handler, options);
  return () => {
    node == null ? void 0 : node.removeEventListener(eventName, handler, options);
  };
}

// src/escape-keydown.ts
function trackEscapeKeydown(fn) {
  const handleKeyDown = (event) => {
    if (event.key === "Escape")
      fn == null ? void 0 : fn(event);
  };
  return addDomEvent(document, "keydown", handleKeyDown);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  trackEscapeKeydown
});
