import { Dict, StateMachine } from './types.js';

declare function or<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(...conditions: Array<StateMachine.Guard<TContext, TState, TEvent>>): StateMachine.GuardHelper<TContext, TState, TEvent>;
declare function and<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(...conditions: Array<StateMachine.Guard<TContext, TState, TEvent>>): StateMachine.GuardHelper<TContext, TState, TEvent>;
declare function not<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(condition: StateMachine.Guard<TContext, TState, TEvent>): StateMachine.GuardHelper<TContext, TState, TEvent>;
declare function stateIn<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(...values: TState["value"][]): StateMachine.GuardExpression<TContext, TState, TEvent>;
declare const guards: {
    or: typeof or;
    and: typeof and;
    not: typeof not;
    stateIn: typeof stateIn;
};
declare function choose<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(actions: Array<{
    guard?: StateMachine.Guard<TContext, TState, TEvent>;
    actions: StateMachine.PureActions<TContext, TState, TEvent>;
}>): StateMachine.ChooseHelper<TContext, TState, TEvent>;
declare function determineGuardFn<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(guard: StateMachine.Guard<TContext, TState, TEvent> | undefined, guardMap: StateMachine.GuardMap<TContext, TState, TEvent>): (context: TContext, event: TEvent, meta: StateMachine.GuardMeta<TContext, TState, TEvent>) => boolean | undefined;
declare function determineActionsFn<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(values: StateMachine.Actions<TContext, TState, TEvent> | undefined, guardMap: StateMachine.GuardMap<TContext, TState, TEvent>): (context: TContext, event: TEvent, meta: StateMachine.GuardMeta<TContext, TState, TEvent>) => StateMachine.PureActions<TContext, TState, TEvent> | undefined;

export { choose, determineActionsFn, determineGuardFn, guards };
