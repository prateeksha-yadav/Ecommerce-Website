import {
  callAll
} from "./chunk-UGUA3L77.mjs";

// src/merge-props.ts
var clsx = (...args) => args.map((str) => str == null ? void 0 : str.trim()).filter(Boolean).join(" ");
function mergeProps(...args) {
  var _a, _b;
  let result = {};
  for (let props of args) {
    for (let key in result) {
      if (/^on[A-Z]/.test(key) && typeof result[key] === "function" && typeof props[key] === "function") {
        result[key] = callAll(result[key], props[key]);
        continue;
      }
      if (key === "className" || key === "class") {
        result[key] = clsx(result[key], props[key]);
        continue;
      }
      if (key === "style") {
        result[key] = Object.assign({}, (_a = result[key]) != null ? _a : {}, (_b = props[key]) != null ? _b : {});
        continue;
      }
      result[key] = props[key] !== void 0 ? props[key] : result[key];
    }
    for (let key in props) {
      if (result[key] === void 0) {
        result[key] = props[key];
      }
    }
  }
  return result;
}

export {
  mergeProps
};
