import { Connector } from "@wagmi/core";
import { ethers } from "ethers";
import EventEmitter from "eventemitter3";
export declare abstract class TWConnector<TConnectParams extends Record<string, any> = {}> extends EventEmitter {
    abstract connect(args?: ConnectParams<TConnectParams>): Promise<string>;
    abstract disconnect(): Promise<void>;
    abstract getAddress(): Promise<string>;
    abstract getSigner(): Promise<ethers.Signer>;
    abstract getProvider(): Promise<ethers.providers.Provider>;
    abstract switchChain(chainId: number): Promise<void>;
    abstract isConnected(): Promise<boolean>;
}
export type ConnectParams<TOpts extends Record<string, any> = {}> = {
    chainId?: number;
} & TOpts;
export declare class WagmiAdapter<TConnectParams extends Record<string, any> = {}> extends TWConnector<TConnectParams> {
    wagmiConnector: Connector<any, any, any>;
    constructor(wagmiConnector: Connector);
    connect(args?: ConnectParams<TConnectParams>): Promise<string>;
    disconnect(): Promise<void>;
    isConnected(): Promise<boolean>;
    getAddress(): Promise<string>;
    getSigner(): Promise<ethers.Signer>;
    getProvider(): Promise<ethers.providers.Provider>;
    switchChain(chainId: number): Promise<void>;
}
//# sourceMappingURL=tw-connector.d.ts.map