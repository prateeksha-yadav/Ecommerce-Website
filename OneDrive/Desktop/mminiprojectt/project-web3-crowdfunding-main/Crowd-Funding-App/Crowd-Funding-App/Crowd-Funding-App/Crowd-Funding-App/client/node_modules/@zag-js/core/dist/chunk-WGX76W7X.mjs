import {
  isObject
} from "./chunk-I7UKD6FS.mjs";

// ../utilities/core/src/object.ts
function compact(obj) {
  if (obj === void 0)
    return obj;
  return Object.fromEntries(
    Object.entries(obj).filter(([, value]) => value !== void 0).map(([key, value]) => [key, isObject(value) ? compact(value) : value])
  );
}

// src/deep-merge.ts
function deepMerge(source, ...objects) {
  for (const obj of objects) {
    const target = compact(obj);
    for (const key in target) {
      if (isObject(obj[key])) {
        if (!source[key]) {
          source[key] = {};
        }
        deepMerge(source[key], obj[key]);
      } else {
        source[key] = obj[key];
      }
    }
  }
  return source;
}

export {
  compact,
  deepMerge
};
