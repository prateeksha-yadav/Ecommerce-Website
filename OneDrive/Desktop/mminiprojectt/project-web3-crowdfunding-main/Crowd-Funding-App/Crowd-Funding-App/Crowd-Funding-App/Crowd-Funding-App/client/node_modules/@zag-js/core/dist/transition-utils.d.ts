import { Dict, StateMachine } from './types.js';

/**
 * A transition is an object that describes the next state, or/and actions
 * that should run when an event is sent.
 *
 * Transitions can be specified as:
 * - A single string: "spinning"
 * - An object with `target`, `actions`, or `guard`: { target: "spinning", actions: [...], guard: isValid }
 * - An array of possible transitions. In this case, we'll pick the first matching transition
 * depending on the `guard` specified
 */
declare function toTarget<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(target: StateMachine.Transition<TContext, TState, TEvent>): StateMachine.TransitionDefinition<TContext, TState, TEvent>;
declare function determineTransitionFn<TContext extends Dict, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject>(transitions: StateMachine.Transitions<TContext, TState, TEvent> | undefined, guardMap: StateMachine.GuardMap<TContext, TState, TEvent>): (context: TContext, event: TEvent, meta: StateMachine.GuardMeta<TContext, TState, TEvent>) => StateMachine.TransitionDefinition<TContext, TState, TEvent> | undefined;

export { determineTransitionFn, toTarget };
