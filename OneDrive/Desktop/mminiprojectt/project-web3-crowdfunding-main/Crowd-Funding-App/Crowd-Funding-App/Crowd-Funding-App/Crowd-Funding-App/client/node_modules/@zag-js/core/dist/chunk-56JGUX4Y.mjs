import {
  isArray,
  isObject,
  isString
} from "./chunk-I7UKD6FS.mjs";

// src/utils.ts
import { snapshot, subscribe } from "@zag-js/store";
import { klona as klonaFull } from "klona/full";
import { klona as klonaJson } from "klona/json";
function cloneJson(v) {
  return klonaJson(v);
}
function cloneFull(v) {
  return klonaFull(v);
}
function toEvent(event) {
  const obj = isString(event) ? { type: event } : event;
  return obj;
}
function toArray(value) {
  if (!value)
    return [];
  return isArray(value) ? value.slice() : [value];
}
function isGuardHelper(value) {
  return isObject(value) && value.predicate != null;
}
var defaultCompareFn = (prev, next) => Object.is(prev, next);
function subscribeKey(obj, key, fn, sync, compareFn) {
  let prev = Reflect.get(snapshot(obj), key);
  const isEqual = compareFn || defaultCompareFn;
  return subscribe(
    obj,
    function onSnapshotChange() {
      const snap = snapshot(obj);
      if (!isEqual(prev, snap[key], key)) {
        fn(snap[key]);
        prev = Reflect.get(snap, key);
      }
    },
    sync
  );
}

export {
  cloneJson,
  cloneFull,
  toEvent,
  toArray,
  isGuardHelper,
  subscribeKey
};
