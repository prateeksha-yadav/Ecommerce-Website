"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/create-proxy.ts
var create_proxy_exports = {};
__export(create_proxy_exports, {
  createProxy: () => createProxy
});
module.exports = __toCommonJS(create_proxy_exports);
var import_store = require("@zag-js/store");

// ../utilities/core/src/functions.ts
var cast = (v) => v;

// src/create-proxy.ts
function createProxy(config) {
  var _a, _b;
  const computedContext = (_a = config.computed) != null ? _a : cast({});
  const initialContext = (_b = config.context) != null ? _b : cast({});
  const state = (0, import_store.proxy)({
    value: "",
    previousValue: "",
    event: cast({}),
    previousEvent: cast({}),
    context: (0, import_store.proxyWithComputed)(initialContext, computedContext),
    done: false,
    tags: [],
    hasTag(tag) {
      return this.tags.includes(tag);
    },
    matches(...value) {
      return value.includes(this.value);
    },
    can(event) {
      return cast(this).nextEvents.includes(event);
    },
    get nextEvents() {
      var _a2, _b2, _c, _d;
      const stateEvents = (_c = (_b2 = (_a2 = config.states) == null ? void 0 : _a2[this.value]) == null ? void 0 : _b2["on"]) != null ? _c : {};
      const globalEvents = (_d = config == null ? void 0 : config.on) != null ? _d : {};
      return Object.keys({ ...stateEvents, ...globalEvents });
    },
    get changed() {
      if (this.event.value === "machine.init" /* Init */ || !this.previousValue)
        return false;
      return this.value !== this.previousValue;
    }
  });
  return cast(state);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createProxy
});
