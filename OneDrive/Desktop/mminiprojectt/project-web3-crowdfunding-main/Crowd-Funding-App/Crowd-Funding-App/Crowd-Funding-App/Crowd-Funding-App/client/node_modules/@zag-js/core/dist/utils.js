"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  cloneFull: () => cloneFull,
  cloneJson: () => cloneJson,
  isGuardHelper: () => isGuardHelper,
  subscribeKey: () => subscribeKey,
  toArray: () => toArray,
  toEvent: () => toEvent
});
module.exports = __toCommonJS(utils_exports);
var import_store = require("@zag-js/store");

// ../utilities/core/src/guard.ts
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isString = (v) => typeof v === "string";

// src/utils.ts
var import_full = require("klona/full");
var import_json = require("klona/json");
function cloneJson(v) {
  return (0, import_json.klona)(v);
}
function cloneFull(v) {
  return (0, import_full.klona)(v);
}
function toEvent(event) {
  const obj = isString(event) ? { type: event } : event;
  return obj;
}
function toArray(value) {
  if (!value)
    return [];
  return isArray(value) ? value.slice() : [value];
}
function isGuardHelper(value) {
  return isObject(value) && value.predicate != null;
}
var defaultCompareFn = (prev, next) => Object.is(prev, next);
function subscribeKey(obj, key, fn, sync, compareFn) {
  let prev = Reflect.get((0, import_store.snapshot)(obj), key);
  const isEqual = compareFn || defaultCompareFn;
  return (0, import_store.subscribe)(
    obj,
    function onSnapshotChange() {
      const snap = (0, import_store.snapshot)(obj);
      if (!isEqual(prev, snap[key], key)) {
        fn(snap[key]);
        prev = Reflect.get(snap, key);
      }
    },
    sync
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cloneFull,
  cloneJson,
  isGuardHelper,
  subscribeKey,
  toArray,
  toEvent
});
