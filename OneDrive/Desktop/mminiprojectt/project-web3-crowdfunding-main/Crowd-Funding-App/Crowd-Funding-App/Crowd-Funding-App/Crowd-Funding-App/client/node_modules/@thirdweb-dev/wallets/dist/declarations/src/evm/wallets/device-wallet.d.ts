import { TWConnector } from "../interfaces/tw-connector";
import { AbstractWallet } from "./abstract";
import { AbstractBrowserWallet, WalletOptions } from "./base";
import type { Chain } from "@thirdweb-dev/chains";
import { ethers } from "ethers";
export type DeviceWalletOptions = {
    chain: {
        chainId: number;
        rpc: string[];
    } | Chain;
    storage?: "localStore" | "credentialStore";
};
export type DeviceWalletConnectionArgs = {
    password: string;
};
export declare class DeviceBrowserWallet extends AbstractBrowserWallet<DeviceWalletOptions, DeviceWalletConnectionArgs> {
    #private;
    static id: "deviceWallet";
    get walletName(): "Device Wallet";
    constructor(options: WalletOptions<DeviceWalletOptions>);
    protected getConnector(): Promise<TWConnector>;
}
export declare class DeviceWalletImpl extends AbstractWallet {
    #private;
    static fromBrowserStorage(): Promise<DeviceWalletImpl>;
    static fromCredentialStore(): Promise<DeviceWalletImpl>;
    private options;
    constructor(options: DeviceWalletImplOptions);
    getSigner(provider?: ethers.providers.Provider): Promise<ethers.Signer>;
    getSavedWalletAddress(): Promise<string | null>;
    generateNewWallet(): Promise<string>;
    loadSavedWallet(password: string): Promise<string>;
    save(password: string): Promise<void>;
    export(password: string): Promise<string>;
}
type WalletData = {
    address: string;
    encryptedData: string;
};
interface IWalletStore {
    getWalletData(): Promise<WalletData | null>;
    storeWalletData(data: WalletData): Promise<void>;
}
type DeviceWalletImplOptions = {
    storage: IWalletStore;
};
export {};
//# sourceMappingURL=device-wallet.d.ts.map