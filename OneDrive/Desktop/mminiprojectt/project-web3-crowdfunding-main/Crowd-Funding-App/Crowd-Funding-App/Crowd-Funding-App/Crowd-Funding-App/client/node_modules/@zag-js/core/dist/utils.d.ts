import { StateMachine, Dict } from './types.js';

declare function cloneJson<T>(v: T): T;
declare function cloneFull<T>(v: T): T;
declare function toEvent<T extends StateMachine.EventObject>(event: StateMachine.Event<T>): T;
declare function toArray<T>(value: T | T[] | undefined): T[];
declare function isGuardHelper(value: any): value is {
    predicate: (guards: Dict) => any;
};
declare function subscribeKey<T extends object, K extends keyof T>(obj: T, key: K, fn: (value: T[K]) => void, sync?: boolean, compareFn?: (prev: T[K], next: T[K], key: string) => boolean): () => void;

export { cloneFull, cloneJson, isGuardHelper, subscribeKey, toArray, toEvent };
