"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/transition-utils.ts
var transition_utils_exports = {};
__export(transition_utils_exports, {
  determineTransitionFn: () => determineTransitionFn,
  toTarget: () => toTarget
});
module.exports = __toCommonJS(transition_utils_exports);

// ../utilities/core/src/guard.ts
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isString = (v) => typeof v === "string";
var isFunction = (v) => typeof v === "function";

// src/utils.ts
var import_store = require("@zag-js/store");
var import_full = require("klona/full");
var import_json = require("klona/json");
function toArray(value) {
  if (!value)
    return [];
  return isArray(value) ? value.slice() : [value];
}
function isGuardHelper(value) {
  return isObject(value) && value.predicate != null;
}

// src/guard-utils.ts
var Truthy = () => true;
function determineGuardFn(guard, guardMap) {
  guard = guard != null ? guard : Truthy;
  return (context, event, meta) => {
    if (isString(guard)) {
      const value = guardMap[guard];
      return isFunction(value) ? value(context, event, meta) : value;
    }
    if (isGuardHelper(guard)) {
      return guard.predicate(guardMap)(context, event, meta);
    }
    return guard == null ? void 0 : guard(context, event, meta);
  };
}

// src/transition-utils.ts
function toTarget(target) {
  return isString(target) ? { target } : target;
}
function determineTransitionFn(transitions, guardMap) {
  return (context, event, meta) => {
    return toArray(transitions).map(toTarget).find((transition) => {
      var _a;
      const determineGuard = determineGuardFn(transition.guard, guardMap);
      const guard = determineGuard(context, event, meta);
      return (_a = guard != null ? guard : transition.target) != null ? _a : transition.actions;
    });
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  determineTransitionFn,
  toTarget
});
