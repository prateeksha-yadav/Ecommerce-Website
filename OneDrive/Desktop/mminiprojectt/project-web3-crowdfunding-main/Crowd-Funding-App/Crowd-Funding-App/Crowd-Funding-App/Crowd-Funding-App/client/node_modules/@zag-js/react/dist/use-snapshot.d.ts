interface AsRef {
    $$valtioRef: true;
}
type AnyFunction = (...args: any[]) => any;
type Snapshot<T> = T extends AnyFunction ? T : T extends AsRef ? T : T extends Promise<infer V> ? Snapshot<V> : {
    readonly [K in keyof T]: Snapshot<T[K]>;
};
interface Options {
    sync?: boolean;
}
declare function useSnapshot<T extends object>(proxyObject: T, options?: Options): Snapshot<T>;

export { useSnapshot };
