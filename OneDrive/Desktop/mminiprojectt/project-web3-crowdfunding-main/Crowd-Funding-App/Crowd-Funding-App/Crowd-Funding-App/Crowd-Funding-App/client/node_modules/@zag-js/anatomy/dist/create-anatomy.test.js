"use strict";

// src/create-anatomy.ts
var createAnatomy = (name, parts = []) => ({
  parts: (...values) => {
    if (isEmpty(parts)) {
      return createAnatomy(name, values);
    }
    throw new Error("createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?");
  },
  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),
  build: () => [...new Set(parts)].reduce(
    (prev, part) => Object.assign(prev, {
      [part]: {
        selector: [
          `&[data-scope="${toKebabCase(name)}"][data-part="${toKebabCase(part)}"]`,
          `& [data-scope="${toKebabCase(name)}"][data-part="${toKebabCase(part)}"]`
        ].join(", "),
        attrs: { "data-scope": toKebabCase(name), "data-part": toKebabCase(part) }
      }
    }),
    {}
  )
});
var toKebabCase = (value) => value.replace(/([A-Z])([A-Z])/g, "$1-$2").replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
var isEmpty = (v) => v.length === 0;

// src/create-anatomy.test.ts
describe("Anatomy", () => {
  it("should allow to set parts", () => {
    const anamtomy = createAnatomy("accordion").parts("root").build();
    expect(anamtomy).toMatchInlineSnapshot(`
      {
        "root": {
          "attrs": {
            "data-part": "root",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="root"], & [data-scope="accordion"][data-part="root"]",
        },
      }
    `);
  });
  it("should convert string to kebab case if needed", () => {
    const anamtomy = createAnatomy("hoverCard").parts("toggleButton").build();
    expect(anamtomy).toMatchInlineSnapshot(`
      {
        "toggleButton": {
          "attrs": {
            "data-part": "toggle-button",
            "data-scope": "hover-card",
          },
          "selector": "&[data-scope="hover-card"][data-part="toggle-button"], & [data-scope="hover-card"][data-part="toggle-button"]",
        },
      }
    `);
  });
  it("should filter duplicate values", () => {
    const anatomy = createAnatomy("accordion").parts("root", "control", "control").build();
    expect(anatomy).toMatchInlineSnapshot(`
      {
        "control": {
          "attrs": {
            "data-part": "control",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="control"], & [data-scope="accordion"][data-part="control"]",
        },
        "root": {
          "attrs": {
            "data-part": "root",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="root"], & [data-scope="accordion"][data-part="root"]",
        },
      }
    `);
  });
  it("should allow to extend the anatomy", () => {
    const anatomy = createAnatomy("accordion").parts("root");
    const extendedAnatomy = anatomy.extendWith("control").build();
    expect(extendedAnatomy).toMatchInlineSnapshot(`
      {
        "control": {
          "attrs": {
            "data-part": "control",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="control"], & [data-scope="accordion"][data-part="control"]",
        },
        "root": {
          "attrs": {
            "data-part": "root",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="root"], & [data-scope="accordion"][data-part="root"]",
        },
      }
    `);
  });
  it("should filter duplicates parts when extending", () => {
    const anatomy = createAnatomy("accordion").parts("root", "control");
    const extendedAnatomy = anatomy.extendWith("control").build();
    expect(extendedAnatomy).toMatchInlineSnapshot(`
      {
        "control": {
          "attrs": {
            "data-part": "control",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="control"], & [data-scope="accordion"][data-part="control"]",
        },
        "root": {
          "attrs": {
            "data-part": "root",
            "data-scope": "accordion",
          },
          "selector": "&[data-scope="accordion"][data-part="root"], & [data-scope="accordion"][data-part="root"]",
        },
      }
    `);
  });
  it("should not allow to invoke .parts more than once", () => {
    expect(() => createAnatomy("accordion").parts("a").parts("b")).toThrow();
  });
  it("should not allow to invoke .parts when extending", () => {
    const anatomy = createAnatomy("accordion").parts("root", "control");
    expect(() => anatomy.parts("b")).toThrow();
  });
});
