"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/middleware.ts
var middleware_exports = {};
__export(middleware_exports, {
  cssVars: () => cssVars,
  shiftArrow: () => shiftArrow,
  transformOrigin: () => transformOrigin
});
module.exports = __toCommonJS(middleware_exports);
var toVar = (value) => ({ variable: value, reference: `var(${value})` });
var cssVars = {
  arrowSize: toVar("--arrow-size"),
  arrowSizeHalf: toVar("--arrow-size-half"),
  arrowBg: toVar("--arrow-background"),
  transformOrigin: toVar("--transform-origin"),
  arrowOffset: toVar("--arrow-offset")
};
var getTransformOrigin = (arrow) => ({
  top: "bottom center",
  "top-start": arrow ? `${arrow.x}px bottom` : "left bottom",
  "top-end": arrow ? `${arrow.x}px bottom` : "right bottom",
  bottom: "top center",
  "bottom-start": arrow ? `${arrow.x}px top` : "top left",
  "bottom-end": arrow ? `${arrow.x}px top` : "top right",
  left: "right center",
  "left-start": arrow ? `right ${arrow.y}px` : "right top",
  "left-end": arrow ? `right ${arrow.y}px` : "right bottom",
  right: "left center",
  "right-start": arrow ? `left ${arrow.y}px` : "left top",
  "right-end": arrow ? `left ${arrow.y}px` : "left bottom"
});
var transformOrigin = {
  name: "transformOrigin",
  fn({ placement, elements, middlewareData }) {
    const { arrow } = middlewareData;
    const transformOrigin2 = getTransformOrigin(arrow)[placement];
    const { floating } = elements;
    floating.style.setProperty(cssVars.transformOrigin.variable, transformOrigin2);
    return {
      data: { transformOrigin: transformOrigin2 }
    };
  }
};
var shiftArrow = (opts) => ({
  name: "shiftArrow",
  fn({ placement, middlewareData }) {
    const { element: arrow } = opts;
    if (middlewareData.arrow) {
      const { x, y } = middlewareData.arrow;
      const dir = placement.split("-")[0];
      Object.assign(arrow.style, {
        left: x != null ? `${x}px` : "",
        top: y != null ? `${y}px` : "",
        [dir]: `calc(100% + ${cssVars.arrowOffset.reference})`
      });
    }
    return {};
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cssVars,
  shiftArrow,
  transformOrigin
});
