'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classPrivateFieldGet = require('../../../../dist/classPrivateFieldGet-6e4ddeb2.cjs.dev.js');
var defineProperty = require('../../../../dist/defineProperty-21d22449.cjs.dev.js');
var storage = require('../../../../dist/storage-b818cf72.cjs.dev.js');
var evm_connectors_injected_dist_thirdwebDevWalletsEvmConnectorsInjected = require('../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.dev.js');
var core = require('@wagmi/core');
var utils_js = require('ethers/lib/utils.js');
require('localforage');
require('ethers');

function isWindowEthereum(w) {
  return "ethereum" in window;
}
var _UNSTABLE_shimOnConnectSelectAccount = /*#__PURE__*/new WeakMap();
class MetaMaskConnector extends evm_connectors_injected_dist_thirdwebDevWalletsEvmConnectorsInjected.InjectedConnector {
  constructor() {
    let {
      chains,
      options: options_
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const options = {
      name: "MetaMask",
      shimDisconnect: true,
      shimChainChangedDisconnect: true,
      getProvider() {
        function getReady(ethereum) {
          const isMetaMask = !!ethereum?.isMetaMask;
          if (!isMetaMask) {
            return;
          }
          // Brave tries to make itself look like MetaMask
          // Could also try RPC `web3_clientVersion` if following is unreliable
          if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) {
            return;
          }
          if (ethereum.isAvalanche) {
            return;
          }
          if (ethereum.isKuCoinWallet) {
            return;
          }
          if (ethereum.isPortal) {
            return;
          }
          if (ethereum.isTokenPocket) {
            return;
          }
          if (ethereum.isTokenary) {
            return;
          }
          return ethereum;
        }
        if (typeof window === "undefined") {
          return;
        }
        if (isWindowEthereum()) {
          if (window.ethereum?.providers) {
            return window.ethereum.providers.find(getReady);
          }
          return getReady(window.ethereum);
        }
      },
      ...options_
    };
    super({
      chains,
      options
    });
    defineProperty._defineProperty(this, "id", "metaMask");
    classPrivateFieldGet._classPrivateFieldInitSpec(this, _UNSTABLE_shimOnConnectSelectAccount, {
      writable: true,
      value: void 0
    });
    classPrivateFieldGet._classPrivateFieldSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);
  }
  async connect() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      const provider = await this.getProvider();
      if (!provider) {
        throw new core.ConnectorNotFoundError();
      }
      if (provider.on) {
        provider.on("accountsChanged", this.onAccountsChanged);
        provider.on("chainChanged", this.onChainChanged);
        provider.on("disconnect", this.onDisconnect);
      }
      this.emit("message", {
        type: "connecting"
      });

      // Attempt to show wallet select prompt with `wallet_requestPermissions` when
      // `shimDisconnect` is active and account is in disconnected state (flag in storage)
      let account = null;
      if (classPrivateFieldGet._classPrivateFieldGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !(await storage.getConnectorStorage().getItem(this.shimDisconnectKey))) {
        account = await this.getAccount().catch(() => null);
        const isConnected = !!account;
        if (isConnected) {
          // Attempt to show another prompt for selecting wallet if already connected
          try {
            await provider.request({
              method: "wallet_requestPermissions",
              params: [{
                eth_accounts: {}
              }]
            });
          } catch (error) {
            // Not all MetaMask injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).
            // Only bubble up error if user rejects request
            if (this.isUserRejectedRequestError(error)) {
              throw new core.UserRejectedRequestError(error);
            }
          }
        }
      }
      if (!account) {
        const accounts = await provider.request({
          method: "eth_requestAccounts"
        });
        account = utils_js.getAddress(accounts[0]);
      }

      // Switch to chain if provided
      let id = await this.getChainId();
      let unsupported = this.isChainUnsupported(id);
      if (chainId && id !== chainId) {
        const chain = await this.switchChain(chainId);
        id = chain.id;
        unsupported = this.isChainUnsupported(id);
      }
      if (this.options?.shimDisconnect) {
        await storage.getConnectorStorage().setItem(this.shimDisconnectKey, true);
      }
      return {
        account,
        chain: {
          id,
          unsupported
        },
        provider
      };
    } catch (error) {
      if (this.isUserRejectedRequestError(error)) {
        throw new core.UserRejectedRequestError(error);
      }
      if (error.code === -32002) {
        throw new core.ResourceUnavailableError(error);
      }
      throw error;
    }
  }
}

exports.MetaMaskConnector = MetaMaskConnector;
