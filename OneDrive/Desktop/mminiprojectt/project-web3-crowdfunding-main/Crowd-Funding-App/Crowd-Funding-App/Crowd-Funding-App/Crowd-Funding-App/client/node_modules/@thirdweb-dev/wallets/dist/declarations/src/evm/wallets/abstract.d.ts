import { Ecosystem, GenericAuthWallet } from "../../core";
import { EVMWallet } from "../interfaces";
import { ethers } from "ethers";
import EventEmitter from "eventemitter3";
export type WalletData = {
    address?: string;
    chainId?: number;
};
export interface WalletEvents {
    connect(data: WalletData): void;
    change(data: WalletData): void;
    message({ type, data }: {
        type: string;
        data?: unknown;
    }): void;
    disconnect(): void;
    error(error: Error): void;
}
export declare const checkContractWalletSignature: (message: string, signature: string, address: string, chainId: number) => Promise<boolean>;
export declare abstract class AbstractWallet extends EventEmitter<WalletEvents> implements GenericAuthWallet, EVMWallet {
    type: Ecosystem;
    protected signer: ethers.Signer | undefined;
    abstract getSigner(): Promise<ethers.Signer>;
    getAddress(): Promise<string>;
    getChainId(): Promise<number>;
    signMessage(message: string): Promise<string>;
    verifySignature(message: string, signature: string, address: string, chainId?: number): Promise<boolean>;
    getCachedSigner(): Promise<ethers.Signer>;
}
//# sourceMappingURL=abstract.d.ts.map