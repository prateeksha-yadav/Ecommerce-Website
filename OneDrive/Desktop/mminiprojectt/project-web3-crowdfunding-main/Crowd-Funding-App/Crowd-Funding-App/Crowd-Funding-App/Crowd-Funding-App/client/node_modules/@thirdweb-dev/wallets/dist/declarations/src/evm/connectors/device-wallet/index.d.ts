import { ConnectParams, TWConnector } from "../../interfaces/tw-connector";
import type { DeviceWalletConnectionArgs, DeviceWalletImpl } from "../../wallets/device-wallet";
import type { Chain } from "@thirdweb-dev/chains";
import { ethers } from "ethers";
export type DeviceWalletConnectorOptions = {
    chain: Pick<Chain, "chainId" | "rpc">;
    wallet: DeviceWalletImpl;
};
export declare class DeviceWalletConnector extends TWConnector<DeviceWalletConnectionArgs> {
    #private;
    readonly id: string;
    readonly name: string;
    options: DeviceWalletConnectorOptions;
    chainId: number;
    protected shimDisconnectKey: string;
    constructor(options: DeviceWalletConnectorOptions);
    connect(args: ConnectParams<DeviceWalletConnectionArgs>): Promise<string>;
    initializeDeviceWallet(password: string): Promise<void>;
    disconnect(): Promise<void>;
    getAddress(): Promise<string>;
    isConnected(): Promise<boolean>;
    getChainId(): Promise<number>;
    getProvider(): Promise<ethers.providers.Provider>;
    getSigner(): Promise<ethers.Signer>;
    switchChain(chainId: number): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map