import { ConnectParams, TWConnector } from "../interfaces/tw-connector";
import { AbstractWallet } from "./abstract";
import type { Chain } from "@wagmi/core";
export type WalletOptions<TOpts extends Record<string, any> = {}> = {
    chains?: Chain[];
    shouldAutoConnect?: boolean;
    appName: string;
} & TOpts;
export declare abstract class AbstractBrowserWallet<TAdditionalOpts extends Record<string, any> = {}, TConnectParams extends Record<string, any> = {}> extends AbstractWallet {
    #private;
    protected coordinatorStorage: LocalForage;
    protected walletStorage: LocalForage;
    protected chains: Chain[];
    protected options: WalletOptions<TAdditionalOpts>;
    constructor(walletId: string, options: WalletOptions<TAdditionalOpts>);
    protected abstract getConnector(): Promise<TWConnector<TConnectParams>>;
    autoConnect(): Promise<string | undefined>;
    connect(connectOptions?: ConnectParams<TConnectParams>): Promise<string>;
    getSigner(): Promise<import("ethers").Signer>;
    disconnect(): Promise<void>;
    switchChain(chainId: number): Promise<void>;
}
//# sourceMappingURL=base.d.ts.map