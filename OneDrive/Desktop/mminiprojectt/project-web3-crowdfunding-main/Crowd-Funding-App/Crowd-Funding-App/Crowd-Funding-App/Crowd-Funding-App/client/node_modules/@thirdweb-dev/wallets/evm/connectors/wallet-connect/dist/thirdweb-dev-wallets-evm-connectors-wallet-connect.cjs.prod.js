'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classPrivateMethodGet = require('../../../../dist/classPrivateMethodGet-e53e7c1b.cjs.prod.js');
var classPrivateFieldGet = require('../../../../dist/classPrivateFieldGet-ee0bcee0.cjs.prod.js');
var defineProperty = require('../../../../dist/defineProperty-6ca2d9a5.cjs.prod.js');
var core = require('@wagmi/core');
var ethers = require('ethers');
var utils_js = require('ethers/lib/utils.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

/**
 * Wallets that support chain switching through WalletConnect
 * - imToken (token.im)
 * - MetaMask (metamask.io)
 * - Rainbow (rainbow.me)
 * - Trust Wallet (trustwallet.com)
 */
const switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;
var _provider = /*#__PURE__*/new WeakMap();
var _switchChain = /*#__PURE__*/new WeakSet();
class WalletConnectConnector extends core.Connector {
  constructor(config) {
    super(config);
    classPrivateMethodGet._classPrivateMethodInitSpec(this, _switchChain);
    defineProperty._defineProperty(this, "id", "walletConnect");
    defineProperty._defineProperty(this, "name", "WalletConnect");
    defineProperty._defineProperty(this, "ready", true);
    classPrivateFieldGet._classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    defineProperty._defineProperty(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) {
        this.emit("disconnect");
      } else {
        this.emit("change", {
          account: utils_js.getAddress(accounts[0])
        });
      }
    });
    defineProperty._defineProperty(this, "onChainChanged", chainId => {
      const id = core.normalizeChainId(chainId);
      const unsupported = this.isChainUnsupported(id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    defineProperty._defineProperty(this, "onDisconnect", () => {
      this.emit("disconnect");
    });
  }
  async connect() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      let targetChainId = chainId || 1;
      const provider = await this.getProvider({
        chainId: targetChainId,
        create: true
      });
      provider.on("accountsChanged", this.onAccountsChanged);
      provider.on("chainChanged", this.onChainChanged);
      provider.on("disconnect", this.onDisconnect);

      // Defer message to the next tick to ensure wallet connect data (provided by `.enable()`) is available
      setTimeout(() => this.emit("message", {
        type: "connecting"
      }), 0);
      const accounts = await provider.enable();
      const account = utils_js.getAddress(accounts[0]);
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id);

      // Not all WalletConnect options support programmatic chain switching
      // Only enable for wallet options that do
      const walletName = provider.connector?.peerMeta?.name ?? "";
      if (switchChainAllowedRegex.test(walletName)) {
        this.switchChain = classPrivateMethodGet._classPrivateMethodGet(this, _switchChain, _switchChain2);
      }
      return {
        account,
        chain: {
          id,
          unsupported
        },
        provider: new ethers.providers.Web3Provider(provider)
      };
    } catch (error) {
      if (/user closed modal/i.test(error.message)) {
        throw new core.UserRejectedRequestError(error);
      }
      throw error;
    }
  }
  async disconnect() {
    const provider = await this.getProvider();
    await provider.disconnect();
    provider.removeListener("accountsChanged", this.onAccountsChanged);
    provider.removeListener("chainChanged", this.onChainChanged);
    provider.removeListener("disconnect", this.onDisconnect);
    if (typeof localStorage !== "undefined") {
      localStorage.removeItem("walletconnect");
    }
  }
  async getAccount() {
    const provider = await this.getProvider();
    const accounts = provider.accounts;
    // return checksum address
    return utils_js.getAddress(accounts[0]);
  }
  async getChainId() {
    const provider = await this.getProvider();
    const chainId = core.normalizeChainId(provider.chainId);
    return chainId;
  }
  async getProvider() {
    let {
      chainId,
      create
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // Force create new provider
    if (!classPrivateFieldGet._classPrivateFieldGet(this, _provider) || chainId || create) {
      const rpc = !this.options?.infuraId ? this.chains.reduce((rpc_, chain) => ({
        ...rpc_,
        [chain.id]: chain.rpcUrls.default.http[0]
      }), {}) : {};
      const WalletConnectProvider = (await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@walletconnect/ethereum-provider')); })).default;
      classPrivateFieldGet._classPrivateFieldSet(this, _provider, new WalletConnectProvider({
        ...this.options,
        chainId,
        rpc: {
          ...rpc,
          ...this.options?.rpc
        }
      }));
    }
    return classPrivateFieldGet._classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const [provider, account] = await Promise.all([this.getProvider({
      chainId
    }), this.getAccount()]);
    return new ethers.providers.Web3Provider(provider, chainId).getSigner(account);
  }
  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!account;
    } catch {
      return false;
    }
  }
}
async function _switchChain2(chainId) {
  const provider = await this.getProvider();
  const id = utils_js.hexValue(chainId);
  try {
    // Set up a race between `wallet_switchEthereumChain` & the `chainChanged` event
    // to ensure the chain has been switched. This is because there could be a case
    // where a wallet may not resolve the `wallet_switchEthereumChain` method, or
    // resolves slower than `chainChanged`.
    await Promise.race([provider.request({
      method: "wallet_switchEthereumChain",
      params: [{
        chainId: id
      }]
    }), new Promise(res => this.on("change", _ref => {
      let {
        chain
      } = _ref;
      if (chain?.id === chainId) {
        res(chainId);
      }
    }))]);
    return this.chains.find(x => x.id === chainId) ?? {
      id: chainId,
      name: `Chain ${id}`,
      network: `${id}`,
      nativeCurrency: {
        name: "Ether",
        decimals: 18,
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: [""]
        },
        public: {
          http: [""]
        }
      }
    };
  } catch (error) {
    const message = typeof error === "string" ? error : error?.message;
    if (/user rejected request/i.test(message)) {
      throw new core.UserRejectedRequestError(error);
    }
    throw new core.SwitchChainError(error);
  }
}

exports.WalletConnectConnector = WalletConnectConnector;
