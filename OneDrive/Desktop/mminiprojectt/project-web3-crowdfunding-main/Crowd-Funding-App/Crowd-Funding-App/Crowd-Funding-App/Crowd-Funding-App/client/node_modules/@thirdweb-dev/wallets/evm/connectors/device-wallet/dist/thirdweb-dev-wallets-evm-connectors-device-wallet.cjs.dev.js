'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classPrivateFieldGet = require('../../../../dist/classPrivateFieldGet-6e4ddeb2.cjs.dev.js');
var defineProperty = require('../../../../dist/defineProperty-21d22449.cjs.dev.js');
var twConnector = require('../../../../dist/tw-connector-8ebaa5b3.cjs.dev.js');
var ethers = require('ethers');
require('eventemitter3');

var _wallet = /*#__PURE__*/new WeakMap();
var _provider = /*#__PURE__*/new WeakMap();
var _signer = /*#__PURE__*/new WeakMap();
class DeviceWalletConnector extends twConnector.TWConnector {
  constructor(options) {
    super();
    defineProperty._defineProperty(this, "id", "device_wallet");
    defineProperty._defineProperty(this, "name", "Device Wallet");
    defineProperty._defineProperty(this, "options", void 0);
    defineProperty._defineProperty(this, "chainId", void 0);
    classPrivateFieldGet._classPrivateFieldInitSpec(this, _wallet, {
      writable: true,
      value: void 0
    });
    classPrivateFieldGet._classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    classPrivateFieldGet._classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    defineProperty._defineProperty(this, "shimDisconnectKey", "deviceWallet.shimDisconnect");
    this.options = options;
    this.chainId = options.chain.chainId;
    classPrivateFieldGet._classPrivateFieldSet(this, _wallet, options.wallet);
  }
  async connect(args) {
    if (args.chainId) {
      this.chainId = args.chainId;
    }
    await this.initializeDeviceWallet(args.password);
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async initializeDeviceWallet(password) {
    // TODO this should be a UI flow prior to calling connect instead
    const savedAddr = await classPrivateFieldGet._classPrivateFieldGet(this, _wallet).getSavedWalletAddress();
    if (!savedAddr) {
      await classPrivateFieldGet._classPrivateFieldGet(this, _wallet).generateNewWallet();
      await classPrivateFieldGet._classPrivateFieldGet(this, _wallet).save(password);
    } else {
      await classPrivateFieldGet._classPrivateFieldGet(this, _wallet).loadSavedWallet(password);
    }
  }
  async disconnect() {
    classPrivateFieldGet._classPrivateFieldSet(this, _provider, undefined);
    classPrivateFieldGet._classPrivateFieldSet(this, _signer, undefined);
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getChainId() {
    return this.chainId;
  }
  async getProvider() {
    if (!classPrivateFieldGet._classPrivateFieldGet(this, _provider)) {
      classPrivateFieldGet._classPrivateFieldSet(this, _provider, new ethers.ethers.providers.JsonRpcBatchProvider(this.options.chain.rpc[0]));
    }
    return classPrivateFieldGet._classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    if (!classPrivateFieldGet._classPrivateFieldGet(this, _wallet)) {
      throw new Error("No wallet found");
    }
    if (!classPrivateFieldGet._classPrivateFieldGet(this, _signer)) {
      const provider = await this.getProvider();
      classPrivateFieldGet._classPrivateFieldSet(this, _signer, await classPrivateFieldGet._classPrivateFieldGet(this, _wallet).getSigner(provider));
    }
    return classPrivateFieldGet._classPrivateFieldGet(this, _signer);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async switchChain(chainId) {
    // TODO
    throw new Error("Not supported");
  }
}

exports.DeviceWalletConnector = DeviceWalletConnector;
